Attribute VB_Name = "SpecSheet"
Sub SetupTestSamples()
    Call CreateInspectionSheetIDs
    Call InsertXLookupAndUpdateKColumn
End Sub


Sub SyncSpecSheetToLogHel()
    ' アイコンに紐づけ。SpecSheetに転記するプロシージャのまとめ
    ' 同値が見つかった場合はエラーメッセージを表示して処理を中断
    If HighlightDuplicateValues Then
        MsgBox "衝撃値で同値が見つかりました。小数点下二桁に影響が出ない範囲で修正してください。", vbCritical
        Exit Sub
    End If
    
    Dim errMsg As String
    errMsg = LocateEmptySpaces()
    
    If errMsg <> "" Then
        ' エラーメッセージがある場合、それを表示
        MsgBox "以下の問題があります。まずはこれらを解決してください：" & vbNewLine & errMsg, vbCritical
        Exit Sub
    Else
    End If
    
    Call CopyDataBasedOnCondition
    Call CustomizeSheetFormats
    MsgBox "転記が終了しました。"
End Sub


Sub CreateInspectionSheetIDs_0410Before()
    ' SpecSheetのB列に試験IDを作成する。これは転記するときのキーとして使用する。
    
    Dim sheetName As String
    sheetName = "Hel_SpecSheet"

    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(sheetName)

    ' D列の最終行を取得
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "D").End(xlUp).row

    Dim i As Long
    For i = 2 To lastRow
        ' D列に値がある行の場合のみ処理
        If ws.Cells(i, "D").Value <> "" Then
            ' S列に式を設定
            ws.Cells(i, "S").Formula = "=IF(INDIRECT(""R" & i & "C9"", FALSE)=""高温"", ""Hot"", IF(INDIRECT(""R" & i & "C9"", FALSE)=""低温"", ""Cold"", IF(INDIRECT(""R" & i & "C9"", FALSE)=""浸せき"", ""Wet"", """")))"

            ' IDを作成
            Dim id As String
            id = ws.Cells(i, "D").Value & "-" & ws.Cells(i, "S").Value & "-" & Left(ws.Cells(i, "E").Value, 1)

            ' D列の値に"F"が含まれている場合、IDの先頭に"F"を追加
            If InStr(ws.Cells(i, "D").Value, "F") > 0 Then
                id = "F" & id
            End If

            ' 作成したIDをB列に設定
            ws.Cells(i, "B").Value = id
            ws.Cells(i, "Q").Value = "合格"
            ws.Cells(i, "R").Value = "合格"
        End If
    Next i
End Sub

Sub CreateInspectionSheetIDs()
    Dim wsSpecSheet As Worksheet
    Set wsSpecSheet = ThisWorkbook.Sheets("Hel_SpecSheet")

    Dim wsSetting As Worksheet
    Set wsSetting = ThisWorkbook.Sheets("Setting")

    Dim lastRow As Long
    lastRow = wsSpecSheet.Cells(wsSpecSheet.Rows.Count, "D").End(xlUp).row

    Dim i As Long, j As Long
    Dim foundMatch As Boolean
    For i = 2 To lastRow
        If wsSpecSheet.Cells(i, "D").Value <> "" Then
            wsSpecSheet.Cells(i, "S").Formula = "=IF(INDIRECT(""R" & i & "C9"", FALSE)=""高温"", ""Hot"", IF(INDIRECT(""R" & i & "C9"", FALSE)=""低温"", ""Cold"", IF(INDIRECT(""R" & i & "C9"", FALSE)=""浸せき"", ""Wet"", """")))"
            Dim id As String
            id = wsSpecSheet.Cells(i, "D").Value & "-" & wsSpecSheet.Cells(i, "S").Value & "-" & Left(wsSpecSheet.Cells(i, "E").Value, 1) & "-" & wsSpecSheet.Cells(i, "C").Value

            foundMatch = False
            For j = 2 To wsSetting.Cells(wsSetting.Rows.Count, "H").End(xlUp).row
                If wsSpecSheet.Cells(i, "D").Value = wsSetting.Cells(j, "H").Value Then
                    foundMatch = True
                    If InStr(wsSetting.Cells(j, "J").Value, "x") > 0 Then
                        id = "F" & id
                    End If
                    Exit For
                End If
            Next j

            If Not foundMatch Then
                MsgBox "エラー: D列の値がSettingシートのH列と一致する項目がありません。処理を中止します。"
                Exit Sub
            End If

            wsSpecSheet.Cells(i, "B").Value = id
            wsSpecSheet.Cells(i, "Q").Value = "合格"
            wsSpecSheet.Cells(i, "R").Value = "合格"
        End If
    Next i
End Sub

Sub InsertXLookupAndUpdateKColumn()
    ' "Hel_SpecSheet"の天頂隙間を調整する
    ' 調整した天頂隙間の行に"Changed"を入れてわかりやすくしている。
    Dim wsHelSpecSheet As Worksheet
    Dim wsSetting As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim formulaResult As Variant
    Dim kValue As Variant
    
    ' シートの設定
    Set wsHelSpecSheet = ThisWorkbook.Sheets("Hel_SpecSheet")
    Set wsSetting = ThisWorkbook.Sheets("Setting")
    
    ' D列の最終行を探索
    lastRow = wsHelSpecSheet.Cells(wsHelSpecSheet.Rows.Count, "D").End(xlUp).row
    
    ' D列を探索し、値がある各行に対して処理を実行
    For i = 2 To lastRow
        If wsHelSpecSheet.Cells(i, "D").Value <> "" Then
            ' T列にXLOOKUP関数を代入
            wsHelSpecSheet.Cells(i, "T").Formula = "=XLOOKUP(" & _
                "Hel_SpecSheet!D" & i & ", " & _
                "Setting!$H$2:$H$47, " & _
                "Setting!$I$2:$I$47, """")"
            
            ' XLOOKUP関数の結果を取得
            formulaResult = wsHelSpecSheet.Cells(i, "T").Value
            
            ' K列の値を取得
            kValue = wsHelSpecSheet.Cells(i, "K").Value
            
            ' K列の値からT列の値を引いて、結果をK列に代入
            wsHelSpecSheet.Cells(i, "K").Value = kValue - formulaResult
            
            ' U列に'Changed'を代入
            wsHelSpecSheet.Cells(i, "U").Value = "Changed"
        End If
    Next i
End Sub


Function HighlightDuplicateValues() As Boolean
    ' シート名を変数で定義
    Dim sheetName As String
    sheetName = "Hel_SpecSheet"
    
    ' 変数宣言
    Dim ws As Worksheet
    Dim lastRow As Long, i As Long, j As Long
    Dim foundDuplicate As Boolean
    foundDuplicate = False ' 同値が見つかったかどうかのフラグを初期化
    
    ' シートオブジェクトを設定
    Set ws = ThisWorkbook.Sheets(sheetName)
    
    ' 最終行を取得
    lastRow = ws.Cells(ws.Rows.Count, "H").End(xlUp).row
    
    ' 色のインデックスを初期化
    Dim colorIndex As Integer
    colorIndex = 3 ' Excelの色インデックスは3から始まる
    
    ' H列の2行目から最終行までループ
    For i = 2 To lastRow
        For j = i + 1 To lastRow
            If ws.Cells(i, "H").Value = ws.Cells(j, "H").Value And ws.Cells(i, "H").Value <> "" Then
                ' 同値を持つセルが見つかった場合、フラグをTrueに設定し、セルに色を塗る
                foundDuplicate = True
                ws.Cells(i, "H").Interior.colorIndex = colorIndex
                ws.Cells(j, "H").Interior.colorIndex = colorIndex
                ws.Cells(i, "H").Interior.colorIndex = colorIndex ' 同値が見つかったセルに色を塗る
            End If
        Next j
        ' 同値が見つかった場合、次の色に変更
        If foundDuplicate And ws.Cells(i, "H").Interior.colorIndex <> xlNone Then
            colorIndex = colorIndex + 1
            ' 色インデックスの最大値を超えないようにチェック
            If colorIndex > 56 Then colorIndex = 3 ' 色インデックスをリセット
        End If
    Next i
    
    ' 同値が一つも見つからなかった場合、H列のセルの色を白に設定
    If Not foundDuplicate Then
        For i = 2 To lastRow
            ws.Cells(i, "H").Interior.color = xlNone
        Next i
    End If
    
    ' 同値が見つかったかどうかに基づいて結果を返す
    HighlightDuplicateValues = foundDuplicate
End Function


Function LocateEmptySpaces() As String
    ' "Hel_SpecSheet"に空欄またはデータ型の誤りがないかをチェック
    ' 変数宣言と初期化
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Hel_SpecSheet")
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "B").End(xlUp).row
    Dim lastCol As Long
    lastCol = ws.Columns("S").Column
    Dim errorMsg As String
    errorMsg = ""
    
    ' 指定範囲をループしてエラーチェック
    For i = 2 To lastRow
        For j = 2 To lastCol
            Dim cell As Range
            Set cell = ws.Cells(i, j)
            ' 空白のチェック
            If IsEmpty(cell.Value) Then
                errorMsg = errorMsg & "空白セル: " & cell.Address(False, False) & vbNewLine
            End If
            ' 数値チェック
            If (j = 7 Or j = 8 Or j = 10 Or j = 11) And Not IsNumeric(cell.Value) Then
                errorMsg = errorMsg & "数値でないセル: " & cell.Address(False, False) & vbNewLine
            End If
            ' 文字列チェック
'            If (j = 14 Or j = 15 Or j = 16) And Not VarType(cell.Value) = vbString Then
'                errorMsg = errorMsg & "文字列でないセル: " & cell.Address(False, False) & vbNewLine
'            End If
        Next j
    Next i
    
    ' エラーメッセージがあればそれを返し、なければ空の文字列を返す
    LocateEmptySpaces = errorMsg
End Function



Sub CopyDataBasedOnCondition()
    'SpecSheetの内容をLogシートに転記する
    Dim logSheet As Worksheet
    Dim helSpec As Worksheet
    Dim lastRowLog As Long
    Dim lastRowSpec As Long
    Dim i As Long, j As Long
    Dim matchCount As Long

    ' ワークシートをセット
    Set logSheet = ThisWorkbook.Worksheets("LOG_Helmet")
    Set helSpec = ThisWorkbook.Worksheets("Hel_SpecSheet")

    ' LOG_Helmetの最終行を取得
    lastRowLog = logSheet.Cells(logSheet.Rows.Count, "H").End(xlUp).row
    ' Hel_SpecSheetの最終行を取得
    lastRowSpec = helSpec.Cells(helSpec.Rows.Count, "H").End(xlUp).row

    ' LOG_HelmetのH列の値を整える
'    For i = 2 To lastRowLog
'        logSheet.Cells(i, "H").Value = Application.Round(logSheet.Cells(i, "H").Value, 2)
'    Next i

    ' 値を比較して転記
    For i = 2 To lastRowLog
        matchCount = 0
        For j = 2 To lastRowSpec
            If logSheet.Cells(i, "H").Value = helSpec.Cells(j, "H").Value Then
                ' H列の値が一致した場合、各列の内容を転記
                matchCount = matchCount + 1
                logSheet.Cells(i, "B").Value = helSpec.Cells(j, "B").Value
                logSheet.Cells(i, "C").Value = helSpec.Cells(j, "B").Value
                logSheet.Cells(i, "D").Value = helSpec.Cells(j, "D").Value
                logSheet.Cells(i, "E").Value = helSpec.Cells(j, "E").Value
                logSheet.Cells(i, "F").Value = helSpec.Cells(j, "F").Value
                logSheet.Cells(i, "G").Value = helSpec.Cells(j, "G").Value
                logSheet.Cells(i, "L").Value = helSpec.Cells(j, "I").Value
                logSheet.Cells(i, "M").Value = helSpec.Cells(j, "J").Value
                logSheet.Cells(i, "N").Value = helSpec.Cells(j, "K").Value '天頂すきま
                logSheet.Cells(i, "O").Value = helSpec.Cells(j, "L").Value
                logSheet.Cells(i, "U").Value = helSpec.Cells(j, "M").Value '試験内容
                logSheet.Cells(i, "P").Value = helSpec.Cells(j, "N").Value '製造ロット
                logSheet.Cells(i, "Q").Value = helSpec.Cells(j, "O").Value
                logSheet.Cells(i, "R").Value = helSpec.Cells(j, "P").Value
                logSheet.Cells(i, "S").Value = helSpec.Cells(j, "Q").Value '構造結果
                logSheet.Cells(i, "T").Value = helSpec.Cells(j, "R").Value
                'logSheet.Cells(i, "U").Value = helSpec.Cells(j, "S").Value
                'logSheet.Cells(i, "U").Value = helSpec.Cells(j, "U").Value
                
            End If
        Next j
        
        ' 一致した値が複数存在する場合、文字を太字にする
        If matchCount > 1 Then
            logSheet.Cells(i, "C").Font.Bold = True
            logSheet.Cells(i, "D").Font.Bold = True
            logSheet.Cells(i, "E").Font.Bold = True
            logSheet.Cells(i, "F").Font.Bold = True
            logSheet.Cells(i, "G").Font.Bold = True
            logSheet.Cells(i, "L").Font.Bold = True
            logSheet.Cells(i, "M").Font.Bold = True
            logSheet.Cells(i, "N").Font.Bold = True
            logSheet.Cells(i, "O").Font.Bold = True
        End If
    Next i
End Sub


Sub CustomizeSheetFormats()
' 各列に書式設定をする
    Dim sheetNames As Variant
    Dim ws As Worksheet
    Dim cell As Range
    Dim rng As Range
    Dim col As Range

    ' Apply to the following sheets
    sheetNames = Array("LOG_Helmet")

    ' Loop through each sheet
    For Each sheet In sheetNames
        Set ws = Worksheets(sheet)

        ' Loop through each cell in the first row
        For Each cell In ws.Rows(1).Cells
            If InStr(1, cell.Value, "最大値(kN)") > 0 Then
                Set rng = ws.Range(cell, ws.Cells(Rows.Count, cell.Column).End(xlUp))
                rng.NumberFormat = "0.00 ""kN"""
            ElseIf InStr(1, cell.Value, "最大値(G)") > 0 Then
                Set rng = ws.Range(cell, ws.Cells(Rows.Count, cell.Column).End(xlUp))
                rng.NumberFormat = "0 ""G"""
            ElseIf InStr(1, cell.Value, "時間") > 0 Then
                Set rng = ws.Range(cell, ws.Cells(Rows.Count, cell.Column).End(xlUp))
                rng.NumberFormat = "0.0 ""ms"""
            ElseIf InStr(1, cell.Value, "温度") > 0 Then
                Set rng = ws.Range(cell, ws.Cells(Rows.Count, cell.Column).End(xlUp))
                rng.NumberFormat = "0.0 ""℃"""
            ElseIf InStr(1, cell.Value, "重量") > 0 Then
                Set rng = ws.Range(cell, ws.Cells(Rows.Count, cell.Column).End(xlUp))
                rng.NumberFormat = "0.0 ""g"""
            ElseIf InStr(1, cell.Value, "ロット") > 0 Then
                Set rng = ws.Range(cell, ws.Cells(Rows.Count, cell.Column).End(xlUp))
                rng.NumberFormat = "@"
            ElseIf InStr(1, cell.Value, "天頂すきま") > 0 Then
                Set rng = ws.Range(cell, ws.Cells(Rows.Count, cell.Column).End(xlUp))
                rng.NumberFormat = "0.0 ""mm"""
            End If

        Next cell
    Next sheet
End Sub

Sub UniformizeLineGraphAxes()

    ' Display input dialog to set the maximum value for the axes
    Dim MaxValue As Double
    MaxValue = InputBox("Y軸の最大値を入力してください。(整数)", "最大値を入力")
    
    ' Loop through all the charts in the active sheet
    Dim ChartObj As ChartObject
    For Each ChartObj In ActiveSheet.ChartObjects
        With ChartObj.chart.Axes(xlValue)
            ' Set the Y-axis maximum value
            .MaximumScale = MaxValue
        End With
    Next ChartObj

End Sub

